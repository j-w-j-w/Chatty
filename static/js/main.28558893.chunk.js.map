{"version":3,"sources":["avatar.png","state/code.ts","CodeBlock.tsx","getXMLErrors.tsx","WebsitePreview.tsx","Chat.tsx","urlArgs.ts","state/profile.ts","state/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","defaultState","body","undefined","title","titleColor","codeFromState","state","current","CodeBlock","props","savedCode","useSelector","code","content","style","fontFamily","backgroundColor","color","padding","borderRadius","Circle","width","height","marginRight","HeaderBar","paddingBottom","display","justifyContent","borderBottom","marginBottom","parseXML","DOMParser","parseFromString","getXMLErrors","xmlDoc","errors","getElementsByTagName","length","result","i","push","key","dangerouslySetInnerHTML","__html","children","innerHTML","WebsitePreview","replace","LinkToWebsite","data","url","encodeURI","window","location","href","ProgrammingChatBot","dispatch","useDispatch","useState","innerHeight","setHeight","innerWidth","setWidth","React","useEffect","updateHeight","addEventListener","removeEventListener","steps","id","message","trigger","user","args","type","value","previousValue","options","label","delay","component","asMessage","console","log","xml","bodys","getXMLBody","createElement","end","theme","background","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","header","fontWeight","fontSize","chatBotProps","headerTitle","botAvatar","require","headerComponent","bubbleOptionStyle","floating","opened","minHeight","flexDirection","flex","alignSelf","defaultProfileState","name","age","chatBotReducer","combineReducers","profile","action","App","vars","m","decodeURI","getUrlVars","store","createStore","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"8KAAAA,EAAOC,QAAU,IAA0B,oC,mICErCC,EAAe,CACnBC,UAAMC,EACNC,WAAOD,EACPE,gBAAYF,GAGP,SAASG,EAAcC,GAC5B,IAAIC,EAAU,GASd,OARID,EAAMH,QACRI,EAAO,aACLD,EAAMF,WAAN,wBAAoCE,EAAMF,WAA1C,MAA2D,GADtD,YAEHE,EAAMH,MAFH,UAILG,EAAML,OACRM,EAAO,UAAMA,EAAN,aAAkBD,EAAML,OAE3B,WAAN,OAAkBM,EAAlB,WCTK,IAAMC,EAAY,SAACC,GACxB,IAAMC,EAAYC,aAA0B,SAACL,GAAD,OAC1CD,EAAcC,EAAMM,SAEhBA,EAAOH,EAAMI,SAAWH,EAE9B,OACE,yBACEI,MAAO,CACLC,WACE,6EACFC,gBAAiB,UACjBC,MAAO,QACPC,QAAS,GACTC,aAAc,IAGhB,kBAAC,EAAD,MACCP,GAAI,cAKLQ,EAAS,SAACX,GAAD,OACb,yBACEK,MAAO,CACLO,MAAO,GACPC,OAAQ,GACRN,gBAAiBP,EAAMQ,MACvBE,aAAc,GACdI,YAAa,MAKbC,EAAY,kBAChB,oCACE,yBACEV,MAAO,CACLW,cAAe,GACfC,QAAS,OACTC,eAAgB,eAGlB,kBAAC,EAAD,CAAQV,MAAM,QACd,kBAAC,EAAD,CAAQA,MAAM,WACd,kBAAC,EAAD,CAAQA,MAAM,gBAEhB,yBACEH,MAAO,CACLc,aAAc,mBACdC,aAAc,QC1Df,SAASC,EAASlB,GAGvB,OAFe,IAAImB,WACGC,gBAAgBpB,EAAM,YAIvC,SAASqB,EAAaC,GAC3B,IAAMC,EAASD,EAAOE,qBAAqB,eAC3C,GAAID,EAAOE,OAAS,EAElB,IADA,IAAMC,EAAwB,GACrBC,EAAI,EAAGA,EAAIJ,EAAOE,SAAUE,EAOnC,OANAD,EAAOE,KACL,yBACEC,IAAKF,EACLG,wBAAyB,CAAEC,OAAQR,EAAOI,GAAGK,SAAS,GAAGC,cAGtDP,EAGX,GAAIJ,EAAOE,qBAAqB,QAAQC,OAAS,EAC/C,MAAO,+CClBJ,SAASS,IACd,IAAMlC,EAAOD,aAAkC,SAACL,GAAD,OAC7CD,EAAcC,EAAMM,SAEtB,OACE,yBAAK8B,wBAAyB,CAAEC,OAAQ/B,EAAKmC,QAAQ,OAAQ,U,WCOjE,SAASC,IACP,ICLuCP,EAAaQ,EDK9CrC,EAAOD,aAAkC,SAACL,GAAD,OAC7CD,EAAcC,EAAMM,SAEhBsC,GCRiCT,EDQF,OCReQ,EDQPrC,ECPtCuC,UAAUC,OAAOC,SAASC,KAAhB,YAA4Bb,EAA5B,YAAmCQ,KDQpD,OAAO,uBAAGK,KAAMJ,GAAT,4CAGF,SAASK,IACd,IAAMC,EAAWC,cADkB,EAEPC,mBAASN,OAAOO,aAFT,mBAE5BrC,EAF4B,KAEpBsC,EAFoB,OAGTF,mBAASN,OAAOS,YAHP,mBAG5BxC,EAH4B,KAGrByC,EAHqB,KAInCC,IAAMC,WAAU,WACd,SAASC,IACPL,EAAUR,OAAOO,aACjBG,EAASV,OAAOS,YAGlB,OADAT,OAAOc,iBAAiB,SAAUD,GAC3B,kBAAMb,OAAOe,oBAAoB,SAAUF,OAGpD,IAAMG,EAAQ,CACZ,CACEC,GAAI,QACJC,QAAS,kEACTC,QAAS,kBAEX,CACEF,GAAI,iBACJG,MAAM,EACND,QAAS,aAEX,CACEF,GAAI,YACJC,QAAS,SAACG,GAER,OADAjB,EAAS,CAAEkB,KAAM,UAAWC,MAAOF,EAAKG,gBAClC,GAAN,OAAUH,EAAKG,cAAf,+HAEFL,QAAS,gBAEX,CACEF,GAAI,eACJQ,QAAS,CACP,CAAEF,MAAO,EAAGG,MAAO,KAAMP,QAAS,aAClC,CAAEI,MAAO,EAAGG,MAAO,OAAQP,QAAS,cAGxC,CACEF,GAAI,YACJC,QAAS,iDACTC,QAAS,mBAEX,CACEF,GAAI,WACJC,QAAS,sEACTC,QAAS,mBAEX,CACEF,GAAI,kBACJC,QAAS,qEACTC,QAAS,yBACTQ,MAAO,KAET,CACEV,GAAI,yBACJC,QACE,uKACFC,QAAS,YACTQ,MAAO,KAGT,CACEV,GAAI,YACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,cACPP,QAAS,4BAKf,CACEF,GAAI,yBACJC,QACE,sEACFC,QAAS,8BACTQ,MAAO,KAET,CACEV,GAAI,8BACJC,QACE,4IACFC,QAAS,cACTQ,MAAO,KAGT,CACEV,GAAI,cACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,SACPP,QAAS,0CAKf,CACEF,GAAI,uCACJC,QACE,oIACFC,QAAS,mCACTQ,MAAO,KAET,CACEV,GAAI,mCACJE,QAAS,KACTS,UAAW,kBAAC,EAAD,CAAWnE,QAAO,UAC7BoE,WAAW,EACXF,MAAO,KAGT,CACEV,GAAI,KACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,MACPP,QAAS,mBAKf,CACEF,GAAI,gBACJC,QACE,gFACFC,QAAS,kBACTQ,MAAO,KAET,CACEV,GAAI,kBACJG,MAAM,EACND,QAAS,SAAC9D,GAER,OADAyE,QAAQC,IAAI1E,EAAMkE,OACE,UAAhBlE,EAAMkE,MACD,uBAEA,0BAKb,CACEN,GAAI,uBACJC,QAAS,uBACTC,QAAS,0CAEX,CACEF,GAAI,wBACJC,QAAS,mDACTC,QAAS,mBAEX,CACEF,GAAI,yCACJC,QACE,yGACFC,QAAS,8CACTQ,MAAO,KAET,CACEV,GAAI,8CACJE,QAAS,gBACTS,UAAW,kBAAC,EAAD,CAAWnE,QAAO,WAC7BoE,WAAW,GAEb,CACEZ,GAAI,gBACJC,QACE,sJACFC,QAAS,cACTQ,MAAO,KAET,CACEV,GAAI,cACJG,MAAM,EACND,QAAS,SAAC9D,GAER,OADAyE,QAAQC,IAAI1E,EAAMkE,OACE,WAAhBlE,EAAMkE,MACD,mBAEA,sBAKb,CACEN,GAAI,oBACJC,QAAS,kDACTC,QAAS,cACTQ,MAAO,KAET,CACEV,GAAI,mBACJC,QACE,0FACFC,QAAS,0BACTQ,MAAO,KAGT,CACEV,GAAI,0BACJC,QAAS,wCACTC,QAAS,kCAEX,CACEF,GAAI,iCACJQ,QAAS,CACP,CAAEF,MAAO,EAAGG,MAAO,UAAWP,QAAS,qBACvC,CAAEI,MAAO,EAAGG,MAAO,QAAMP,QAAS,uBAGtC,CACEF,GAAI,oBACJC,QAAS,oCACTC,QAAS,6CACTQ,MAAO,KAET,CACEV,GAAI,oBACJC,QACE,6FACFC,QAAS,6CACTQ,MAAO,KAGT,CACEV,GAAI,6CACJC,QAAQ,oHACRC,QAAS,mBAGX,CACEF,GAAI,kBACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,cACPP,QAAS,+BAKf,CACEF,GAAI,4BACJC,QAAQ,iFACRC,QAAS,wBACTQ,MAAO,KAET,CACEV,GAAI,wBACJC,QAAQ,iCACRC,QAAS,0BACTQ,MAAO,KAGT,CACEV,GAAI,0BACJE,QAAS,uBACTU,WAAW,EACXD,UACE,kBAAC,EAAD,CACEnE,QAAO,yDAKb,CACEwD,GAAI,uBACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,cACPP,QAAS,kCAKf,CACEF,GAAI,+BACJC,QAAQ,oKACRC,QAAS,qBACTQ,MAAO,MAET,CACEV,GAAI,qBACJC,QAAQ,wDACRC,QAAS,qBAEX,CACEF,GAAI,oBACJQ,QAAS,CACP,CAAEF,MAAO,EAAGG,MAAO,KAAMP,QAAS,iBAClC,CAAEI,MAAO,EAAGG,MAAO,OAAQP,QAAS,qBAGxC,CACEF,GAAI,kBACJC,QAAQ,0MACRC,QAAS,gBACTQ,MAAO,KAET,CACEV,GAAI,gBACJC,QAAQ,6EACRC,QAAS,2BACTQ,MAAO,KAGT,CACEV,GAAI,2BACJG,MAAM,EACND,QAAS,SAACE,GACR,IAAMW,EAAMtD,EAAS2C,EAAKE,OAC1B,GAAmB,wDAAfF,EAAKE,MACP,MAAO,uCAET,IAAMxC,EAASF,EAAamD,GACtBnF,EF/TP,SAAoBiC,GACzB,IAAMmD,EAAQnD,EAAOE,qBAAqB,QAC1C,GAAqB,IAAjBiD,EAAMhD,OACR,OAAOgD,EAAM,GE4TIC,CAAWF,GAExB,OAAIjD,EACK,iCAGJlC,GAILuD,EAAS,CAAEkB,KAAM,UAAWC,MAAO1E,EAAK4C,YACjC,oCAJE,kCAOb,CACEwB,GAAI,iCACJW,UAAWjB,IAAMwB,eAAc,SAACd,GAC9B,IAAMtC,EAASF,EAAaH,EAAS2C,EAAKG,gBAC1C,OAAO,6BAAMzC,MAEfoC,QAAS,oCAEX,CACEF,GAAI,mCACJC,QAAS,+DACTC,QAAS,4BAEX,CACEF,GAAI,uCACJC,QAAQ,sDACRC,QAAS,oDACTQ,MAAO,KAET,CACEV,GAAI,oDACJC,QAAQ,sCACRC,QAAS,2BACTQ,MAAO,KAET,CACEV,GAAI,wCACJC,QAAQ,yDACRC,QAAS,0BACTQ,MAAO,KAET,CACEV,GAAI,gCACJC,QAAQ,2GACRC,QAAS,0BACTQ,MAAO,KAET,CACEV,GAAI,iCACJC,QAAQ,uKACRC,QAAS,0BACTQ,MAAO,KAET,CACEV,GAAI,mCACJC,QAAQ,sEACRC,QAAS,4BAITQ,MAAO,KAET,CACEV,GAAI,4BACJW,UAAW,kBAAClC,EAAD,MACXyB,QAAS,8BACTQ,MAAO,KAET,CACEV,GAAI,8BACJC,QAAQ,kEACRC,QAAS,+BACTQ,MAAO,KAET,CACEV,GAAI,+BACJQ,QAAS,CACP,CAAEF,MAAO,EAAGG,MAAO,KAAMP,QAAS,wBAClC,CAAEI,MAAO,EAAGG,MAAO,OAAQP,QAAS,4BAIxC,CACEF,GAAI,uBACJC,QAAQ,yHACRC,QAAS,uBACTQ,MAAO,KAET,CACEV,GAAI,yBACJC,QAAQ,6FACRC,QAAS,uBACTQ,MAAO,KAET,CACEV,GAAI,uBACJC,QAAQ,uIACRC,QAAS,4BACTQ,MAAO,KAET,CACEV,GAAI,4BACJC,QAAQ,2HACRC,QAAS,iCACTQ,MAAO,MAGT,CACEV,GAAI,iCACJE,QAAS,0BACTU,WAAW,EACXD,UACE,kBAAC,EAAD,CAAWnE,QAAO,gDAItB,CACEwD,GAAI,0BACJQ,QAAS,CAAC,CAAEF,MAAO,EAAGG,MAAO,cAAeP,QAAS,mBAGvD,CACEF,GAAI,gBACJC,QAAQ,+EACRC,QAAS,wBAGX,CACEF,GAAI,uBACJQ,QAAS,CACP,CAAEF,MAAO,EAAGG,MAAO,SAAUP,QAAS,8BACtC,CAAEI,MAAO,EAAGG,MAAO,SAAUP,QAAS,6BACtC,CAAEI,MAAO,EAAGG,MAAO,OAAQP,QAAS,gCAGxC,CACEF,GAAI,6BACJC,QAAQ,mDACRC,QAAS,wBAGX,CACEF,GAAI,4BACJC,QAAQ,YACRC,QAAS,oCAGX,CACEF,GAAI,mCACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,SACPP,QAAS,uCAEX,CACEI,MAAO,EACPG,MAAO,OACPP,QAAS,wCAIf,CACEF,GAAI,sCACJC,QAAQ,kCACRC,QAAS,4BACTQ,MAAO,KAGT,CACEV,GAAI,qCACJC,QAAS,6BACTC,QAAS,qCAGX,CACEF,GAAI,oCACJG,MAAM,EACND,QAAS,SAACE,GAER,OADAjB,EAAS,CAAEkB,KAAM,WAAYC,MAAOF,EAAKE,QAClC,wBAIX,CACEN,GAAI,sBACJC,QAAS,+BACTC,QAAS,yBAGX,CACEF,GAAI,wBACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,UACPP,QAAS,+BAEX,CACEI,MAAO,EACPG,MAAO,QACPP,QAAS,gCAIf,CACEF,GAAI,8BACJC,QAAQ,kCACRC,QAAS,wBACTQ,MAAO,KAGT,CACEV,GAAI,6BACJC,QAAS,YACTC,QAAS,qBAEX,CACEF,GAAI,oBACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,UACPP,QAAS,0BAEX,CACEI,MAAO,EACPG,MAAO,UACPP,QAAS,6BAIf,CACEF,GAAI,0BACJC,QAAQ,kCACRC,QAAS,qBAEX,CACEF,GAAI,yBACJE,QAAS,0BACTS,UAAW,kBAAClC,EAAD,OAEb,CACEuB,GAAI,0BACJC,QAAQ,gIACRC,QAAS,sBACTQ,MAAO,KAET,CACEV,GAAI,sBACJC,QACE,qMACFC,QAAS,yBACTQ,MAAO,KAGT,CACEV,GAAI,yBACJC,QAAS,uBACTC,QAAS,4BAGX,CACEF,GAAI,2BACJW,UACE,kBAAC,EAAD,CACEnE,QAAO,yEAGXoE,WAAW,EACXV,QAAS,kCAGX,CACEF,GAAI,iCACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,UACPP,QAAS,kDAKf,CACEF,GAAI,+CACJC,QAAS,mEACTC,QAAS,mCAGX,CACEF,GAAI,kCACJW,UACE,kBAAC,EAAD,CACEnE,QAAO,sFAGXoE,WAAW,EACXV,QAAS,iBAGX,CACEF,GAAI,gBACJC,QACE,0GACFC,QAAS,4BAGX,CACEF,GAAI,2BACJQ,QAAS,CAAC,CAAEF,MAAO,EAAGG,MAAO,cAAeP,QAAS,qBAGvD,CACEF,GAAI,kBACJC,QAAS,uDACTC,QAAS,uBAGX,CACEF,GAAI,sBACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,0BACPP,QAAS,iBAEX,CACEI,MAAO,EACPG,MAAO,0BACPP,QAAS,+BAEX,CACEI,MAAO,EACPG,MAAO,2BACPP,QAAS,iCAKf,CACEF,GAAI,8BACJC,QAAS,mDACTC,QAAS,uBAGX,CACEF,GAAI,gBACJC,QAAS,gDACTC,QAAS,6BAGX,CACEF,GAAI,4BACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,MACPP,QAAS,WAEP,OADAf,EAAS,CAAEkB,KAAM,gBAAiBC,MAAO,QAClC,+BAGX,CACEA,MAAO,EACPG,MAAO,OACPP,QAAS,WAEP,OADAf,EAAS,CAAEkB,KAAM,gBAAiBC,MAAO,WAClC,+BAGX,CACEA,MAAO,EACPG,MAAO,OACPP,QAAS,WAEP,OADAf,EAAS,CAAEkB,KAAM,gBAAiBC,MAAO,SAClC,iCAMf,CACEN,GAAI,6BACJW,UACE,6BACE,kBAAC,EAAD,MACA,6BACA,kBAAClC,EAAD,OAGJyB,QAAS,gCAGX,CACEF,GAAI,+BACJC,QAAS,uCACTC,QAAS,oBAGX,CACEF,GAAI,mBACJC,QACE,mHACFC,QAAS,uBAGX,CACEF,GAAI,sBACJC,QACE,2HACFC,QAAS,uBAGX,CACEF,GAAI,sBACJW,UACE,kBAAC,EAAD,CACEnE,QAAO,kXAUX0D,QAAS,2BAGX,CACEF,GAAI,0BACJC,QACE,0JACFC,QAAS,gBAOX,CACEF,GAAI,eACJG,MAAM,EACND,QAAS,SAACE,GAER,OADAjB,EAAS,CAAEkB,KAAM,UAAWC,MAAOF,EAAKE,QACjC,cAIX,CACEN,GAAI,YACJC,QAAS,6EACTC,QAAS,gBAGX,CACEF,GAAI,eACJC,QAAS,sBACTC,QAAS,mBAEX,CACEF,GAAI,kBACJW,UAAW,kBAAChC,EAAD,MACXwC,KAAK,IAIHC,EAAQ,CACZC,WAAY,MACZ3E,WAAY,UACZ4E,cAAe,UACfC,gBAAiB,OACjBC,eAAgB,OAChBC,eAAgB,UAChBC,aAAc,OACdC,gBAAiB,UACjBC,cAAe,WAGXC,EACJ,yBACEpF,MAAO,CACLE,gBAAiB,MACjBE,QAAS,GACTD,MAAO,QACPkF,WAAY,OACZC,SAAU,KANd,UAaIC,EAAe,CACnBC,YAAa,UACbC,UAAWC,EAAQ,IACnBpC,MAAOA,EACPqC,gBAAiBP,EACjBQ,kBAAmB,CAAE1F,gBAAiB,UAAWC,MAAO,UAG1D,OAAIK,GAAU,KAAOD,GAAS,IAE1B,kBAAC,gBAAD,CAAeoE,MAAOA,GACpB,kBAAC,IAAD,eAASpE,MAAM,OAAOsF,UAAU,EAAMC,QAAQ,GAAUP,KAM5D,yBACEvF,MAAO,CACLE,gBAAiB,OACjBK,MAAO,OACPwF,UAAW,QACXnF,QAAS,OACToF,cAAe,WAGjB,yBACEhG,MAAO,CACLY,QAAS,OACTqF,KAAM,EACND,cAAe,SACfnF,eAAgB,SAChBqF,UAAW,WAGb,yBAAKlG,MAAO,CAAEiG,KAAM,KACpB,6BACE,kBAAC,gBAAD,CAAetB,MAAOA,GACpB,kBAAC,IAAYY,KAGjB,yBAAKvF,MAAO,CAAEiG,KAAM,O,WEp3BtBE,EAAsB,CAC1BC,UAAMhH,EACNiH,SAAKjH,EACLgD,SAAKhD,GCDA,IAAMkH,EAAiBC,YAAgB,CAC5CC,QDGK,WAGJ,IAFDhH,EAEA,uDAFQ2G,EACRM,EACA,uCACA,OAAQA,EAAO7C,MACb,IAAK,SACHpE,EAAK,2BAAQA,GAAR,IAAe6G,IAAKI,EAAO5C,QAChC,MACF,IAAK,UACHrE,EAAK,2BAAQA,GAAR,IAAe4G,KAAMK,EAAO5C,QACjC,MACF,IAAK,SACHrE,EAAK,2BAAQA,GAAR,IAAe4C,IAAKqE,EAAO5C,QAGpC,OAAOrE,GCjBPM,KPeK,WAAmE,IAA9CN,EAA6C,uDAArCN,EAAcuH,EAAuB,uCACvE,OAAQA,EAAO7C,MACb,IAAK,UACHpE,EAAK,2BAAQA,GAAR,IAAeL,KAAMsH,EAAO5C,QACjC,MACF,IAAK,WACHrE,EAAK,2BAAQA,GAAR,IAAeH,MAAOoH,EAAO5C,QAClC,MACF,IAAK,gBACHrE,EAAK,2BAAQA,GAAR,IAAeF,WAAYmH,EAAO5C,QAG3C,OAAOrE,KQHMkH,MAtBf,WAEE,IAAM/C,EHVD,WACL,IAAIgD,EAAkC,GAStC,OARArE,OAAOC,SAASC,KAAKP,QAAQ,2BAA2B,SACtD2E,EACAjF,EACAkC,GAGA,OADA8C,EAAKhF,GAAOkF,UAAUhD,GACf,MAEF8C,EGAMG,GACb,GAAInD,EAAI,KACN,OACE,yBACE/B,wBAAyB,CACvBC,OAAQ8B,EAAI,QAMpB,IAAMoD,EAAQC,YAAYV,GAE1B,OACE,kBAAC,IAAD,CAAUS,MAAOA,GACf,kBAACtE,EAAD,QCbcwE,QACW,cAA7B3E,OAAOC,SAAS2E,UAEe,UAA7B5E,OAAOC,SAAS2E,UAEhB5E,OAAOC,SAAS2E,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN5D,QAAQ4D,MAAMA,EAAMxE,c","file":"static/js/main.28558893.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.3a5b6db7.png\";","import { ChatBotAction } from './action';\r\n\r\nconst defaultState = {\r\n  body: undefined as undefined | string,\r\n  title: undefined as undefined | string,\r\n  titleColor: undefined as undefined | string,\r\n};\r\n\r\nexport function codeFromState(state: typeof defaultState) {\r\n  let current = '';\r\n  if (state.title) {\r\n    current = `<h1${\r\n      state.titleColor ? ` style=\"color:${state.titleColor};\"` : ''\r\n    }>${state.title}</h1>`;\r\n  }\r\n  if (state.body) {\r\n    current = `${current}\\n${state.body}`;\r\n  }\r\n  return `<body>\\n${current}</body>`;\r\n}\r\n\r\nexport function codeReducer(state = defaultState, action: ChatBotAction) {\r\n  switch (action.type) {\r\n    case 'setBody':\r\n      state = { ...state, body: action.value };\r\n      break;\r\n    case 'setTitle':\r\n      state = { ...state, title: action.value };\r\n      break;\r\n    case 'setTitleColor':\r\n      state = { ...state, titleColor: action.value };\r\n      break;\r\n  }\r\n  return state;\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { ChatBotState } from './state';\r\nimport { codeFromState } from './state/code';\r\n\r\n/**\r\n * If content is provided, display content. Otherwise display the code stored\r\n * in the redux store\r\n */\r\nexport const CodeBlock = (props: { content?: string }) => {\r\n  const savedCode = useSelector<ChatBotState>((state: ChatBotState) =>\r\n    codeFromState(state.code)\r\n  );\r\n  const code = props.content || savedCode;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        fontFamily:\r\n          'Courier New, Courier, Lucida Sans Typewriter, Lucida Typewriter, monospace',\r\n        backgroundColor: '#4d0000',\r\n        color: 'white',\r\n        padding: 10,\r\n        borderRadius: 5,\r\n      }}\r\n    >\r\n      <HeaderBar />\r\n      {code || `<NO CODE>`}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Circle = (props: { color: string }) => (\r\n  <div\r\n    style={{\r\n      width: 10,\r\n      height: 10,\r\n      backgroundColor: props.color,\r\n      borderRadius: 50,\r\n      marginRight: 5,\r\n    }}\r\n  />\r\n);\r\n\r\nconst HeaderBar = () => (\r\n  <>\r\n    <div\r\n      style={{\r\n        paddingBottom: 10,\r\n        display: 'flex',\r\n        justifyContent: 'flex-start',\r\n      }}\r\n    >\r\n      <Circle color=\"red\" />\r\n      <Circle color=\"yellow\" />\r\n      <Circle color=\"lightgreen\" />\r\n    </div>\r\n    <div\r\n      style={{\r\n        borderBottom: '0.5px solid grey',\r\n        marginBottom: 10,\r\n      }}\r\n    ></div>\r\n  </>\r\n);\r\n","import React from 'react';\r\n\r\nexport function parseXML(code: string) {\r\n  const parser = new DOMParser();\r\n  const xmlDoc = parser.parseFromString(code, 'text/xml');\r\n  return xmlDoc;\r\n}\r\n\r\nexport function getXMLErrors(xmlDoc: Document) {\r\n  const errors = xmlDoc.getElementsByTagName('parsererror');\r\n  if (errors.length > 0) {\r\n    const result: JSX.Element[] = [];\r\n    for (let i = 0; i < errors.length; ++i) {\r\n      result.push(\r\n        <div\r\n          key={i}\r\n          dangerouslySetInnerHTML={{ __html: errors[i].children[1].innerHTML }}\r\n        />\r\n      );\r\n      return result;\r\n    }\r\n  }\r\n  if (xmlDoc.getElementsByTagName('body').length > 1) {\r\n    return 'Nur ein einziges <body> element ist erlaubt.';\r\n  }\r\n}\r\n\r\nexport function getXMLBody(xmlDoc: Document) {\r\n  const bodys = xmlDoc.getElementsByTagName('body');\r\n  if (bodys.length === 1) {\r\n    return bodys[0];\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { ChatBotState } from './state';\r\nimport { codeFromState } from './state/code';\r\n\r\nexport function WebsitePreview() {\r\n  const code = useSelector<ChatBotState, string>((state) =>\r\n    codeFromState(state.code)\r\n  );\r\n  return (\r\n    <div dangerouslySetInnerHTML={{ __html: code.replace('body', 'div') }} />\r\n  );\r\n}\r\n","/** @format */\r\n\r\nimport React, { Dispatch, useState } from \"react\";\r\nimport ChatBot from \"react-simple-chatbot\";\r\nimport { MessageArgs, TriggerArgs } from \"./chatbot-types\";\r\nimport { createWebsiteURLWithData } from \"./urlArgs\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ChatBotAction } from \"./state/action\";\r\nimport { CodeBlock } from \"./CodeBlock\";\r\nimport { getXMLErrors, parseXML, getXMLBody } from \"./getXMLErrors\";\r\nimport { WebsitePreview } from \"./WebsitePreview\";\r\nimport { codeFromState } from \"./state/code\";\r\nimport { ChatBotState } from \"./state\";\r\nimport { ThemeProvider } from \"styled-components\";\r\n\r\ntype TriggerProps = { value: string; steps?: any };\r\n\r\nfunction LinkToWebsite() {\r\n  const code = useSelector<ChatBotState, string>((state) =>\r\n    codeFromState(state.code)\r\n  );\r\n  const url = createWebsiteURLWithData(\"site\", code);\r\n  return <a href={url}>Klick hier um deine Website zu öffnen</a>;\r\n}\r\n\r\nexport function ProgrammingChatBot() {\r\n  const dispatch = useDispatch<Dispatch<ChatBotAction>>();\r\n  const [height, setHeight] = useState(window.innerHeight);\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  React.useEffect(() => {\r\n    function updateHeight() {\r\n      setHeight(window.innerHeight);\r\n      setWidth(window.innerWidth);\r\n    }\r\n    window.addEventListener(\"resize\", updateHeight);\r\n    return () => window.removeEventListener(\"resize\", updateHeight);\r\n  });\r\n\r\n  const steps = [\r\n    {\r\n      id: \"start\",\r\n      message: \"Hej, ich bin Saphira 🐉 Wie heißt du? 🤗\",\r\n      trigger: \"enter-username\",\r\n    },\r\n    {\r\n      id: \"enter-username\",\r\n      user: true,\r\n      trigger: \"ask-learn\",\r\n    },\r\n    {\r\n      id: \"ask-learn\",\r\n      message: (args: MessageArgs) => {\r\n        dispatch({ type: \"setName\", value: args.previousValue });\r\n        return `${args.previousValue}, möchtest du lernen, wie man ganz einfach eine Homepage programmiert? 👩💻👨💻`;\r\n      },\r\n      trigger: \"select-learn\",\r\n    },\r\n    {\r\n      id: \"select-learn\",\r\n      options: [\r\n        { value: 1, label: \"Ja\", trigger: \"learn-yes\" },\r\n        { value: 2, label: \"Nein\", trigger: \"learn-no\" },\r\n      ],\r\n    },\r\n    {\r\n      id: \"learn-yes\",\r\n      message: \"Super, dann legen wir direkt los! 🤩\",\r\n      trigger: \"only-smartphone\",\r\n    },\r\n    {\r\n      id: \"learn-no\",\r\n      message: \"Schade. Vielleicht kann ich dich dennoch überzeugen 🤔\",\r\n      trigger: \"only-smartphone\",\r\n    },\r\n    {\r\n      id: \"only-smartphone\",\r\n      message: \"Dazu brauchst du nichts weiter als dein Smartphone... 🤳\",\r\n      trigger: \"explain-build-together\",\r\n      delay: 2000,\r\n    },\r\n    {\r\n      id: \"explain-build-together\",\r\n      message:\r\n        \"Wir machen das so: Ich zeige dir, wie ich meine Homepage programmiere und du kannst dann in jedem Schritt deine eigene Homepage entwickeln. 🙃💪\",\r\n      trigger: \"los-gehts\",\r\n      delay: 4000,\r\n    },\r\n\r\n    {\r\n      id: \"los-gehts\",\r\n      options: [\r\n        {\r\n          value: 1,\r\n          label: \"Los geht's!\",\r\n          trigger: \"explain-language-basic\",\r\n        },\r\n      ],\r\n    },\r\n\r\n    {\r\n      id: \"explain-language-basic\",\r\n      message:\r\n        \"Zuerst erkläre ich dir ganz grob, wie die Sprache funktioniert. \",\r\n      trigger: \"explain-language-basic-tags\",\r\n      delay: 2000,\r\n    },\r\n    {\r\n      id: \"explain-language-basic-tags\",\r\n      message:\r\n        \"Immer, wenn wir was definieren wollen, müssen wir sagen, wo es anfängt und wo es aufhört. Dafür nutzen wir Tags. 🤖\",\r\n      trigger: \"was-ist-das\",\r\n      delay: 4000,\r\n    },\r\n\r\n    {\r\n      id: \"was-ist-das\",\r\n      options: [\r\n        {\r\n          value: 1,\r\n          label: \"Tage?!\",\r\n          trigger: \"explain-language-basic-tags-language\",\r\n        },\r\n      ],\r\n    },\r\n\r\n    {\r\n      id: \"explain-language-basic-tags-language\",\r\n      message:\r\n        \"Nein, das sind keine Wochentage. Das spricht man aus wie TÄÄG! Das ist sowas wie ein Name. Am Anfang sieht das dann so aus:\",\r\n      trigger: \"code-explain-language-basic-tags\",\r\n      delay: 2000,\r\n    },\r\n    {\r\n      id: \"code-explain-language-basic-tags\",\r\n      trigger: \"ok\",\r\n      component: <CodeBlock content={`<tag>`} />,\r\n      asMessage: true,\r\n      delay: 1000,\r\n    },\r\n\r\n    {\r\n      id: \"ok\",\r\n      options: [\r\n        {\r\n          value: 1,\r\n          label: \"Ok!\",\r\n          trigger: \"ask-tag-input\",\r\n        },\r\n      ],\r\n    },\r\n\r\n    {\r\n      id: \"ask-tag-input\",\r\n      message:\r\n        \"Such direkt mal die Zeichen auf deiner Tastatur und tippe <tag> selbst ein :)\",\r\n      trigger: \"enter-tag-input\",\r\n      delay: 1000,\r\n    },\r\n    {\r\n      id: \"enter-tag-input\",\r\n      user: true,\r\n      trigger: (props: TriggerProps) => {\r\n        console.log(props.value);\r\n        if (props.value === \"<tag>\") {\r\n          return \"enter-tag-input-true\";\r\n        } else {\r\n          return \"enter-tag-input-false\";\r\n        }\r\n      },\r\n    },\r\n    //TODO über Parser lösen\r\n    {\r\n      id: \"enter-tag-input-true\",\r\n      message: \"Das klappt ja super!\",\r\n      trigger: \"code-explain-language-basic-close-tags\",\r\n    },\r\n    {\r\n      id: \"enter-tag-input-false\",\r\n      message: \"Das stimmt noch nicht ganz, versuche es nochmal!\",\r\n      trigger: \"enter-tag-input\",\r\n    },\r\n    {\r\n      id: \"code-explain-language-basic-close-tags\",\r\n      message:\r\n        \"Am Ende eines Tags müssen wir dann sagen, dass es vorbei ist. 🙅️ Das machen wir so:\",\r\n      trigger: \"code-explain-language-basic-close-tags-code\",\r\n      delay: 2000,\r\n    },\r\n    {\r\n      id: \"code-explain-language-basic-close-tags-code\",\r\n      trigger: \"explain-slash\",\r\n      component: <CodeBlock content={`</tag>`} />,\r\n      asMessage: true,\r\n    },\r\n    {\r\n      id: \"explain-slash\",\r\n      message:\r\n        \"Es ist ganz wichtig, dass wir hier den schrägen Strich nicht vergessen. Dann geht nämlich alles kaputt. 🙇 Gib es jetzt selbst ein.\",\r\n      trigger: \"enter-slash\",\r\n      delay: 3000,\r\n    },\r\n    {\r\n      id: \"enter-slash\",\r\n      user: true,\r\n      trigger: (props: TriggerProps) => {\r\n        console.log(props.value);\r\n        if (props.value === \"</tag>\") {\r\n          return \"enter-slash-true\";\r\n        } else {\r\n          return \"enter-slash-false\";\r\n        }\r\n      },\r\n    },\r\n    //TODO: über Parser lösen\r\n    {\r\n      id: \"enter-slash-false\",\r\n      message: \"Das stimmt noch nicht ganz, versuche es nochmal\",\r\n      trigger: \"enter-slash\",\r\n      delay: 1000,\r\n    },\r\n    {\r\n      id: \"enter-slash-true\",\r\n      message:\r\n        \"Sehr gut! Jetzt haben wir erstmal genug Theorie gehabt, jetzt geht es los! 💪\",\r\n      trigger: \"hast-du-lust-loszulegen\",\r\n      delay: 1000,\r\n    },\r\n\r\n    {\r\n      id: \"hast-du-lust-loszulegen\",\r\n      message: \"Hast du Lust loszulegen? 😊\",\r\n      trigger: \"hast-du-lust-loszulegen-select\",\r\n    },\r\n    {\r\n      id: \"hast-du-lust-loszulegen-select\",\r\n      options: [\r\n        { value: 1, label: \"Jawoll!\", trigger: \"super-wir-starten\" },\r\n        { value: 2, label: \"Nö\", trigger: \"noch-mehr-theorie\" },\r\n      ],\r\n    },\r\n    {\r\n      id: \"super-wir-starten\",\r\n      message: \"Super!! Wir starten! 🚀\",\r\n      trigger: \"um-auf-unserer-homepage-etwas-darzustellen\",\r\n      delay: 1000,\r\n    },\r\n    {\r\n      id: \"noch-mehr-theorie\",\r\n      message:\r\n        \"Du willst NOCH MEHR Theorie? Nicht mit mir! Wir gehen jetzt ans Eingemachte! Es wird toll!\",\r\n      trigger: \"um-auf-unserer-homepage-etwas-darzustellen\",\r\n      delay: 3000,\r\n    },\r\n\r\n    {\r\n      id: \"um-auf-unserer-homepage-etwas-darzustellen\",\r\n      message: `Um auf unserer Homepage etwas darzustellen, benötigt diese einen sogenannten Körper (im Englischen: \"Body\")`,\r\n      trigger: \"body-verstanden\",\r\n    },\r\n\r\n    {\r\n      id: \"body-verstanden\",\r\n      options: [\r\n        {\r\n          value: 1,\r\n          label: \"Verstanden!\",\r\n          trigger: \"im-body-kompletter-inhalt\",\r\n        },\r\n      ],\r\n    },\r\n\r\n    {\r\n      id: \"im-body-kompletter-inhalt\",\r\n      message: `Im Body kannst du den kompletten Inhalt einer Homepage festlegen. 💪`,\r\n      trigger: \"chatbot-body-beispiel\",\r\n      delay: 2000,\r\n    },\r\n    {\r\n      id: \"chatbot-body-beispiel\",\r\n      message: `Ich mache das zum Beispiel so:`,\r\n      trigger: \"code-lieblingstier-body\",\r\n      delay: 1000,\r\n    },\r\n\r\n    {\r\n      id: \"code-lieblingstier-body\",\r\n      trigger: \"code-body-verstanden\",\r\n      asMessage: true,\r\n      component: (\r\n        <CodeBlock\r\n          content={`<body>Mein Lieblingstier: Die Schildkröte</body>`}\r\n        />\r\n      ),\r\n    },\r\n\r\n    {\r\n      id: \"code-body-verstanden\",\r\n      options: [\r\n        {\r\n          value: 1,\r\n          label: \"Verstanden!\",\r\n          trigger: \"lieblingstier-website-gebaut\",\r\n        },\r\n      ],\r\n    },\r\n\r\n    {\r\n      id: \"lieblingstier-website-gebaut\",\r\n      message: `Ja, ich habe Schildkröten richtig gern. 😍🐢😍 Deshalb will ich eine Webseite über Schildkröten programmiert. 🤓`,\r\n      trigger: \"welt-sagen-website\",\r\n      delay: 3500,\r\n    },\r\n    {\r\n      id: \"welt-sagen-website\",\r\n      message: `Weißt du schon, was du der Welt sagen möchtest?`,\r\n      trigger: \"select-welt-sagen\",\r\n    },\r\n    {\r\n      id: \"select-welt-sagen\",\r\n      options: [\r\n        { value: 1, label: \"Ja\", trigger: \"welt-sagen-ja\" },\r\n        { value: 2, label: \"Nein\", trigger: \"welt-sagen-nein\" },\r\n      ],\r\n    },\r\n    {\r\n      id: \"welt-sagen-nein\",\r\n      message: `Hier ein paar Ideen: Ich habe auch mal eine Webseite gemacht, auf der ich meinen Eltern danke. Die haben sich sehr gefreut! Ein Freund hat auch mal eine Webseite über Fussball gemacht ⚽️`,\r\n      trigger: \"welt-sagen-ja\",\r\n      delay: 4000,\r\n    },\r\n    {\r\n      id: \"welt-sagen-ja\",\r\n      message: `Also schreib doch einfach mal was hin. Natürlich in einem <body>!️`,\r\n      trigger: \"enter-website-welt-sagen\",\r\n      delay: 2000,\r\n    },\r\n\r\n    {\r\n      id: \"enter-website-welt-sagen\",\r\n      user: true,\r\n      trigger: (args: TriggerArgs) => {\r\n        const xml = parseXML(args.value);\r\n        if (args.value === \"<body>Mein Lieblingstier: Die Schildkröte</body>\") {\r\n          return \"enter-website-welt-sagen-abschreiben\";\r\n        }\r\n        const errors = getXMLErrors(xml);\r\n        const body = getXMLBody(xml);\r\n\r\n        if (errors) {\r\n          return \"enter-website-welt-sagen-error\";\r\n        }\r\n\r\n        if (!body) {\r\n          return \"enter-website-welt-sagen-body\";\r\n        }\r\n\r\n        dispatch({ type: \"setBody\", value: body.innerHTML });\r\n        return \"enter-website-welt-sagen-korrekt\";\r\n      },\r\n    },\r\n    {\r\n      id: \"enter-website-welt-sagen-error\",\r\n      component: React.createElement((args: MessageArgs) => {\r\n        const errors = getXMLErrors(parseXML(args.previousValue));\r\n        return <div>{errors}</div>;\r\n      }),\r\n      trigger: \"enter-website-welt-sagen-error-2\",\r\n    },\r\n    {\r\n      id: \"enter-website-welt-sagen-error-2\",\r\n      message: \"Da ist wohl was schief gelaufen. Probier's doch noch einmal.\",\r\n      trigger: \"enter-website-welt-sagen\",\r\n    },\r\n    {\r\n      id: \"enter-website-welt-sagen-abschreiben\",\r\n      message: `Hej - nicht einfach abschreiben! 🤔️`,\r\n      trigger: \"enter-website-welt-sagen-abschreiben-eigener-text\",\r\n      delay: 1000,\r\n    },\r\n    {\r\n      id: \"enter-website-welt-sagen-abschreiben-eigener-text\",\r\n      message: `Schreibe deinen eigenen Text.️`,\r\n      trigger: \"enter-website-welt-sagen\",\r\n      delay: 1000,\r\n    },\r\n    {\r\n      id: \"enter-website-welt-sagen-schreibweise\",\r\n      message: `Achte auf die Richtige Schreibweise 🤥️`,\r\n      trigger: \"code-lieblingstier-body\",\r\n      delay: 1000,\r\n    },\r\n    {\r\n      id: \"enter-website-welt-sagen-body\",\r\n      message: `Denk dran, dass der Text von dem Beginn <body> sowie dem Ende </body> eingefasst wird 😮️`,\r\n      trigger: \"code-lieblingstier-body\",\r\n      delay: 2000,\r\n    },\r\n    {\r\n      id: \"enter-website-welt-sagen-slash\",\r\n      message: `Huch, hast du vielleicht etwas vergessen? Denke immer an den schrägen Strich \"/\" wenn du eine HTML-Anweisung wieder schließen möchtest. 🤖 ️`,\r\n      trigger: \"code-lieblingstier-body\",\r\n      delay: 4000,\r\n    },\r\n    {\r\n      id: \"enter-website-welt-sagen-korrekt\",\r\n      message: `Super, jetzt haben wir auch schon den Inhalt deiner Website. ️`,\r\n      trigger: \"ask-website-sieht-gut-aus\",\r\n      /* TODO:\r\n       *hier müsste ggf. die Website dargestellt werden\r\n       */\r\n      delay: 2000,\r\n    },\r\n    {\r\n      id: \"ask-website-sieht-gut-aus\",\r\n      component: <WebsitePreview />,\r\n      trigger: \"ask-website-sieht-gut-aus-2\",\r\n      delay: 1000,\r\n    },\r\n    {\r\n      id: \"ask-website-sieht-gut-aus-2\",\r\n      message: `Da ist sie nun deine Homepage! Gefällt sie dir? 😊`,\r\n      trigger: \"select-website-sieht-gut-aus\",\r\n      delay: 1000,\r\n    },\r\n    {\r\n      id: \"select-website-sieht-gut-aus\",\r\n      options: [\r\n        { value: 1, label: \"Ja\", trigger: \"website-sieht-gut-ja\" },\r\n        { value: 2, label: \"Nein\", trigger: \"website-sieht-gut-nein\" },\r\n      ],\r\n    },\r\n\r\n    {\r\n      id: \"website-sieht-gut-ja\",\r\n      message: `Es sieht schon dufte aus, aber mit meiner Dicken Brille 🤶 erkenne ich bei der kleinen Schrift nichts!️`,\r\n      trigger: \"explain-headline-tag\",\r\n      delay: 1000,\r\n    },\r\n    {\r\n      id: \"website-sieht-gut-nein\",\r\n      message: `Das habe ich mir schon gedacht! Wir machen es jetzt noch glamoröser! 🤩️`,\r\n      trigger: \"explain-headline-tag\",\r\n      delay: 1000,\r\n    },\r\n    {\r\n      id: \"explain-headline-tag\",\r\n      message: `Machen wir die Zeile ganz groß! Dazu gibt es titel! Die heißen <h1>, <h2>, <h3>, <h4>, <h5>. Und es gibt sogar noch <h6>️`,\r\n      trigger: \"sprache-text-rechts-links\",\r\n      delay: 2000,\r\n    },\r\n    {\r\n      id: \"sprache-text-rechts-links\",\r\n      message: `Wie du ja weißt, verpackt man in dieser Sprache html den Text immer von links und rechts, also zum Beispiel so:️`,\r\n      trigger: \"code-sprache-text-rechts-links\",\r\n      delay: 1500,\r\n    },\r\n\r\n    {\r\n      id: \"code-sprache-text-rechts-links\",\r\n      trigger: \"ueberschrift-verstanden\",\r\n      asMessage: true,\r\n      component: (\r\n        <CodeBlock content={`<h3>Hallo ich bin eine Überschrift</h3>`} />\r\n      ),\r\n    },\r\n\r\n    {\r\n      id: \"ueberschrift-verstanden\",\r\n      options: [{ value: 1, label: \"Verstanden!\", trigger: \"zuerst-machen\" }],\r\n    },\r\n\r\n    {\r\n      id: \"zuerst-machen\",\r\n      message: `Wenn du jetzt deine Homepage neu erstellst: Was würdest du zuerst machen?`,\r\n      trigger: \"select-body-headline\",\r\n    },\r\n\r\n    {\r\n      id: \"select-body-headline\",\r\n      options: [\r\n        { value: 1, label: \"<head>\", trigger: \"select-body-headline-false\" },\r\n        { value: 2, label: \"<body>\", trigger: \"select-body-headline-true\" },\r\n        { value: 3, label: \"<h1>\", trigger: \"select-body-headline-false\" },\r\n      ],\r\n    },\r\n    {\r\n      id: \"select-body-headline-false\",\r\n      message: `Schade! Nicht ganz korrekt. Versuche es nochmal!`,\r\n      trigger: \"select-body-headline\",\r\n    },\r\n\r\n    {\r\n      id: \"select-body-headline-true\",\r\n      message: `Und dann?`,\r\n      trigger: \"select-body-headline-true-weiter\",\r\n    },\r\n\r\n    {\r\n      id: \"select-body-headline-true-weiter\",\r\n      options: [\r\n        {\r\n          value: 1,\r\n          label: \"<head>\",\r\n          trigger: \"select-body-headline-headline-false\",\r\n        },\r\n        {\r\n          value: 2,\r\n          label: \"<h1>\",\r\n          trigger: \"select-body-headline-headline-true\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: \"select-body-headline-headline-false\",\r\n      message: `Fast! Bitte versuche es erneut.`,\r\n      trigger: \"select-body-headline-true\",\r\n      delay: 1000,\r\n    },\r\n\r\n    {\r\n      id: \"select-body-headline-headline-true\",\r\n      message: \"Jetzt gib deinen Titel ein\",\r\n      trigger: \"enter-body-headline-headline-true\",\r\n    },\r\n\r\n    {\r\n      id: \"enter-body-headline-headline-true\",\r\n      user: true,\r\n      trigger: (args: TriggerArgs) => {\r\n        dispatch({ type: \"setTitle\", value: args.value });\r\n        return \"body-headline-close\";\r\n      },\r\n    },\r\n\r\n    {\r\n      id: \"body-headline-close\",\r\n      message: \"Und wie geht es dann weiter?\",\r\n      trigger: \"select-headline-close\",\r\n    },\r\n\r\n    {\r\n      id: \"select-headline-close\",\r\n      options: [\r\n        {\r\n          value: 1,\r\n          label: \"</body>\",\r\n          trigger: \"select-close-headline-false\",\r\n        },\r\n        {\r\n          value: 2,\r\n          label: \"</h1>\",\r\n          trigger: \"select-close-headline-true\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: \"select-close-headline-false\",\r\n      message: `Fast! Bitte versuche es erneut.`,\r\n      trigger: \"select-headline-close\",\r\n      delay: 1000,\r\n    },\r\n\r\n    {\r\n      id: \"select-close-headline-true\",\r\n      message: \"Und dann?\",\r\n      trigger: \"select-body-close\",\r\n    },\r\n    {\r\n      id: \"select-body-close\",\r\n      options: [\r\n        {\r\n          value: 1,\r\n          label: \"</body>\",\r\n          trigger: \"select-body-close-true\",\r\n        },\r\n        {\r\n          value: 2,\r\n          label: \"</head>\",\r\n          trigger: \"select-body-close-false\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: \"select-body-close-false\",\r\n      message: `Fast! Bitte versuche es erneut.`,\r\n      trigger: \"select-body-close\",\r\n    },\r\n    {\r\n      id: \"select-body-close-true\",\r\n      trigger: \"sieht-ziemlich-cool-aus\",\r\n      component: <WebsitePreview />,\r\n    },\r\n    {\r\n      id: \"sieht-ziemlich-cool-aus\",\r\n      message: `Das ist doch schon mal ziemlich cool. 😎 Aber es ist schon ein bisschen langweilig, dass das alles in schwarz ist. `,\r\n      trigger: \"gruene-ueberschrift\",\r\n      delay: 3000,\r\n    },\r\n    {\r\n      id: \"gruene-ueberschrift\",\r\n      message:\r\n        \"Meine Lieblingsfarbe ist ja grün. Deshalb will ich meine Überschrift in grün haben. 😍 Dafür muss ich bei der Überschrift sagen, dass sie grün sein soll. 🎨\",\r\n      trigger: \"gruene-ueberschrift-so\",\r\n      delay: 3000,\r\n    },\r\n\r\n    {\r\n      id: \"gruene-ueberschrift-so\",\r\n      message: \"Das mache ich durch:\",\r\n      trigger: \"gruene-ueberschrift-code\",\r\n    },\r\n\r\n    {\r\n      id: \"gruene-ueberschrift-code\",\r\n      component: (\r\n        <CodeBlock\r\n          content={`<h1 style=\"color=green;\">Mein Lieblingstier: Die Schildkröte</h1>`}\r\n        />\r\n      ),\r\n      asMessage: true,\r\n      trigger: \"gruene-ueberschrift-verstanden\",\r\n    },\r\n\r\n    {\r\n      id: \"gruene-ueberschrift-verstanden\",\r\n      options: [\r\n        {\r\n          value: 1,\r\n          label: \"Weiter!\",\r\n          trigger: \"gruene-ueberschrift-gesamt-code-ueberleitung\",\r\n        },\r\n      ],\r\n    },\r\n\r\n    {\r\n      id: \"gruene-ueberschrift-gesamt-code-ueberleitung\",\r\n      message: \"👨💻 Insgesamt sieht mein Code jetzt so aus:\",\r\n      trigger: \"gruene-ueberschrift-gesamt-code\",\r\n    },\r\n\r\n    {\r\n      id: \"gruene-ueberschrift-gesamt-code\",\r\n      component: (\r\n        <CodeBlock\r\n          content={`<body><h1 style=\"color=green;\">Mein Lieblingstier: Die Schildkröte</h1></body>`}\r\n        />\r\n      ),\r\n      asMessage: true,\r\n      trigger: \"andere-farben\",\r\n    },\r\n\r\n    {\r\n      id: \"andere-farben\",\r\n      message:\r\n        \"Hinter color= kannst du verschiedene Farben auf Englisch eintragen. Vergiss das Istgleichzeichen nicht!\",\r\n      trigger: \"andere-farben-verstanden\",\r\n    },\r\n\r\n    {\r\n      id: \"andere-farben-verstanden\",\r\n      options: [{ value: 1, label: \"Verstanden!\", trigger: \"fabe-definieren\" }],\r\n    },\r\n\r\n    {\r\n      id: \"fabe-definieren\",\r\n      message: \"Wie würde ich denn die Überschrift rot machen?\",\r\n      trigger: \"select-rote-schrift\",\r\n    },\r\n\r\n    {\r\n      id: \"select-rote-schrift\",\r\n      options: [\r\n        {\r\n          value: 1,\r\n          label: '<h1 style=\"color=red;\">',\r\n          trigger: \"farbe-waehlen\",\r\n        },\r\n        {\r\n          value: 2,\r\n          label: '<h1 style=\"Farbe=rot;\">',\r\n          trigger: \"fehler-farbige-ueberschrift\",\r\n        },\r\n        {\r\n          value: 3,\r\n          label: '<h1 style=\"color=blue;\">',\r\n          trigger: \"fehler-farbige-ueberschrift\",\r\n        },\r\n      ],\r\n    },\r\n\r\n    {\r\n      id: \"fehler-farbige-ueberschrift\",\r\n      message: \"Ups, das war leider falsch! Versuche es nochmal!\",\r\n      trigger: \"select-rote-schrift\",\r\n    },\r\n\r\n    {\r\n      id: \"farbe-waehlen\",\r\n      message: \"Welche Farbe soll deine Überschrift haben?\",\r\n      trigger: \"select-farbe-ueberschrift\",\r\n    },\r\n\r\n    {\r\n      id: \"select-farbe-ueberschrift\",\r\n      options: [\r\n        {\r\n          value: 1,\r\n          label: \"rot\",\r\n          trigger: () => {\r\n            dispatch({ type: \"setTitleColor\", value: \"red\" });\r\n            return \"farbige-ueberschrift-super\";\r\n          },\r\n        },\r\n        {\r\n          value: 2,\r\n          label: \"gelb\",\r\n          trigger: () => {\r\n            dispatch({ type: \"setTitleColor\", value: \"yellow\" });\r\n            return \"farbige-ueberschrift-super\";\r\n          },\r\n        },\r\n        {\r\n          value: 3,\r\n          label: \"blau\",\r\n          trigger: () => {\r\n            dispatch({ type: \"setTitleColor\", value: \"blue\" });\r\n            return \"farbige-ueberschrift-super\";\r\n          },\r\n        },\r\n      ],\r\n    },\r\n\r\n    {\r\n      id: \"farbige-ueberschrift-super\",\r\n      component: (\r\n        <div>\r\n          <CodeBlock />\r\n          <br />\r\n          <WebsitePreview />\r\n        </div>\r\n      ),\r\n      trigger: \"farbige-ueberschrift-super-2\",\r\n    },\r\n\r\n    {\r\n      id: \"farbige-ueberschrift-super-2\",\r\n      message: \"Das sieht ja schon richtig cool aus!\",\r\n      trigger: \"inhalt-erstellen\",\r\n    },\r\n\r\n    {\r\n      id: \"inhalt-erstellen\",\r\n      message:\r\n        \"Jetzt wollen wir aber noch die Webseite mit Inhalt füllen. Bis jetzt haben wir ja bloß die Überschrift.\",\r\n      trigger: \"inhalt-schildkroete\",\r\n    },\r\n\r\n    {\r\n      id: \"inhalt-schildkroete\",\r\n      message:\r\n        \"Dafür schreiben wir das hinter die Überschrift. Auf meiner Webseite über Schildkröten sah das damals so aus:\",\r\n      trigger: \"inhalt-schildkroete\",\r\n    },\r\n\r\n    {\r\n      id: \"inhalt-schildkroete\",\r\n      component: (\r\n        <CodeBlock\r\n          content={`<body>\r\n      <h1 style=\"color=green;\">Mein Lieblingstier: Die Schildkröte</h1>\r\n      \r\n      Es gibt auf der ganzen Welt derzeit 341 verscheidene Schildkrötenarten.\r\n      Es gibt Landschildkrötenarten und kleine Wasserschildkröten und auch große\r\n      Fluss-Schildkröten in Südamerika und sogar Riesenschildkröten.\r\n      \r\n      </body>`}\r\n        />\r\n      ),\r\n      trigger: \"inhalt-selbst-schreiben\",\r\n    },\r\n\r\n    {\r\n      id: \"inhalt-selbst-schreiben\",\r\n      message:\r\n        \"Jetzt kanns du deinen Inhalt passend zu deinem Titel schreiben. Die Überschrift von eben habe ich mir gemerkt und füge sie zu deinem Inhalt dazu.\",\r\n      trigger: \"enter-inhalt\",\r\n    },\r\n\r\n    /*\r\n     * Hier muss dann nochmal der Code von vorher eingefügt werden, damit der User nur noch seinen Text eingeben muss\r\n     */\r\n\r\n    {\r\n      id: \"enter-inhalt\",\r\n      user: true,\r\n      trigger: (args: TriggerArgs) => {\r\n        dispatch({ type: \"setBody\", value: args.value });\r\n        return \"hp-fertig\";\r\n      },\r\n    },\r\n\r\n    {\r\n      id: \"hp-fertig\",\r\n      message: \"Und schon ist deine erste eigene Homepage fertig! 😲👏\",\r\n      trigger: \"finaler-link\",\r\n    },\r\n\r\n    {\r\n      id: \"finaler-link\",\r\n      message: \"Schau gleich hier: \",\r\n      trigger: \"link to website\",\r\n    },\r\n    {\r\n      id: \"link to website\",\r\n      component: <LinkToWebsite />,\r\n      end: true,\r\n    },\r\n  ];\r\n\r\n  const theme = {\r\n    background: \"red\",\r\n    fontFamily: \"Verdana\",\r\n    headerBgColor: \"#1F8ACF\",\r\n    headerFontColor: \"#fff\",\r\n    headerFontSize: \"15px\",\r\n    botBubbleColor: \"#1F8ACF\",\r\n    botFontColor: \"#fff\",\r\n    userBubbleColor: \"#BEEBFF\",\r\n    userFontColor: \"#4a4a4a\",\r\n  };\r\n\r\n  const header = (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"red\",\r\n        padding: 14,\r\n        color: \"white\",\r\n        fontWeight: \"bold\",\r\n        fontSize: 16,\r\n      }}\r\n    >\r\n      Chatty\r\n    </div>\r\n  );\r\n\r\n  const chatBotProps = {\r\n    headerTitle: \"Saphira\",\r\n    botAvatar: require(\"./avatar.png\"),\r\n    steps: steps,\r\n    headerComponent: header,\r\n    bubbleOptionStyle: { backgroundColor: \"#BEEBFF\", color: \"black\" },\r\n  };\r\n\r\n  if (height <= 750 && width <= 600) {\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <ChatBot width=\"100%\" floating={true} opened={true} {...chatBotProps} />\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"gray\",\r\n        width: \"100%\",\r\n        minHeight: \"100vh\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flex: 1,\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          alignSelf: \"center\",\r\n        }}\r\n      >\r\n        <div style={{ flex: 1 }} />\r\n        <div>\r\n          <ThemeProvider theme={theme}>\r\n            <ChatBot {...chatBotProps} />\r\n          </ThemeProvider>\r\n        </div>\r\n        <div style={{ flex: 1 }} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export function getUrlVars() {\r\n  var vars: { [key: string]: string } = {};\r\n  window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (\r\n    m,\r\n    key,\r\n    value\r\n  ) {\r\n    vars[key] = decodeURI(value);\r\n    return '';\r\n  });\r\n  return vars;\r\n}\r\n\r\nexport function createWebsiteURLWithData(key: string, data: string) {\r\n  return encodeURI(window.location.href + `/?${key}=${data}`);\r\n}\r\n","import { ChatBotAction } from './action';\r\n\r\nconst defaultProfileState = {\r\n  name: undefined as undefined | string,\r\n  age: undefined as undefined | number,\r\n  url: undefined as undefined | string,\r\n};\r\n\r\nexport function profileReducer(\r\n  state = defaultProfileState,\r\n  action: ChatBotAction\r\n) {\r\n  switch (action.type) {\r\n    case 'setAge':\r\n      state = { ...state, age: action.value };\r\n      break;\r\n    case 'setName':\r\n      state = { ...state, name: action.value };\r\n      break;\r\n    case 'setURL':\r\n      state = { ...state, url: action.value };\r\n      break;\r\n  }\r\n  return state;\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { profileReducer } from './profile';\r\nimport { codeReducer } from './code';\r\n\r\nexport const chatBotReducer = combineReducers({\r\n  profile: profileReducer,\r\n  code: codeReducer,\r\n});\r\n\r\nexport type ChatBotState = NonNullable<Parameters<typeof chatBotReducer>[0]>;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { ProgrammingChatBot } from './Chat';\r\nimport { getUrlVars } from './urlArgs';\r\nimport { createStore } from 'redux';\r\nimport { chatBotReducer } from './state';\r\nimport { Provider } from 'react-redux';\r\n\r\nfunction App() {\r\n  // display custom site if site argument passed to url\r\n  const args = getUrlVars();\r\n  if (args['site']) {\r\n    return (\r\n      <div\r\n        dangerouslySetInnerHTML={{\r\n          __html: args['site'],\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  const store = createStore(chatBotReducer);\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <ProgrammingChatBot />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}